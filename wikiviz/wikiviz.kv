#:kivy 1.8.0
#:import win kivy.core.window
#:import Color kivy.graphics.Color
#: import font pygame.font
#:import random random.random

<UINode>:
	id: node
	label: label
	source: ''
	keyword: ''
	edges: {}
	circle: bkgrd
	size: win.Window.width*.2, win.Window.width*.2
	Widget:
		id: bkgrd
		size: root.size
		canvas:
			Color:
				#rgb: 0, 0, 0
				rgb: random(),random(),random()
			Ellipse:
				size:self.height+20, self.width+20
				pos:self.x-10 , self.y-10

	Label:
		id: label
		text: node.keyword
		font_size: root.height/5
		font_name: font.match_font('Droid Sans, Helvetica Light, Arial Thin, Arial')

<WikiPediaUINode>:
	id: node
	image: image
	AsyncImage:
		id: image
		source: node.source
		size: root.size
		canvas:
			Ellipse:
				size: self.height+10, self.width+10
				pos: self.x-5, self.y-5
				texture: self.texture 

	
<Edge>:
	pos: self.p.center_x, self.p.center_y
	size: self.c.center_x - self.p.center_x, self.c.center_y - self.p.center_y

	canvas:
		Color:
			rgb: .9, .9,.9

		Line:
			points: self.p.center_x, self.p.center_y , self.c.center_x, self.c.center_y
			width: 2



<SearchBar>:
	id: uis
	size: win.Window.width/2, win.Window.height/10
	pos: win.Window.width/2 -self.width/2 , win.Window.height/2 - self.height/2
	search_bar: search_text_field

	MyTextInput:
		id: search_text_field
		pos: root.pos
		size_hint: .85,1
		font_size: (root.height)-30
		text: 'Search'
		multiline: False
		cursor_blink: False
		background_color: .1,.1,.1,1				
		foreground_color: 1,1,1,1
		cursor_color: 1,1,1,1				
		border: 0,0,0,0
		padding: 10
		#font_name: font.match_font('Droid Sans, Helvetica Light, Arial Thin, Arial')
				
		on_touch_up:
			x = (search_text_field.text == 'Search')
			if x and search_text_field.collide_point(args[1].x, args[1].y): search_text_field.text = ''
		on_enter:
			uis.on_search_function(search_text_field.text)


<SearchButton>:
	source: 'assets/icon_search.png'



<UIScatter>: 
	id: uic
	background: startup_image
	StartupImage:
		id: startup_image
		source: 'assets/bg.jpg'
		canvas:
			Rectangle:
				size: (win.Window.width)/(uic.scale), win.Window.height/(uic.scale)
				pos: (-uic.x)/uic.scale, (-uic.y)/uic.scale
				texture: startup_image.texture




		
<UISummary>: 
	id: summ
	content: tsum
	size: win.Window.width/2, win.Window.height/2
	title: ""
	title_size: str((summ.height)/20)+"px"
	separator_height: 0
	center: win.Window.width/2, win.Window.height/2


	text: ''
	Widget:
		id: tsum
		size: root.width, root.height
		center: root.center
		Widget:
			#pos: tsum.pos
			size: tsum.size
			canvas:
				Color:
					rgba: .1,.1,.1,.95
				Rectangle:
					pos: tsum.x , tsum.y 
					size: tsum.size

		Label:
			id: summary
			text: summ.text
			markup: True
			center: tsum.center_x ,tsum.y + (tsum.height-1.5-self.height) + 20

<ControlsLayout>:
	id: controls
	size: win.Window.width*.1, win.Window.height*.1
	spacing: str(5) + 'px'
	pos: win.Window.width*.9, win.Window.height*.9



<ResetSearchPopup>:
	id: uipup
	content: uicc
	title: "Would you like to reset your search?"
	title_size: str((uipup.height)/5)+"px"
	size: 2*win.Window.width/3, win.Window.height/5
	separator_height: 0
	center: win.Window.width/2, win.Window.height/2

	Widget:
		id: uicc
		size: uipup.width, uipup.height/2
		yes_button: yes
		no_button: no 
		pos: uipup.pos

		Button:
			id: yes
			text: "YES"
			pos: uicc.pos
			size: uicc.width/2, (uipup.height)/(4)
			font_size: (uipup.height)/7
			on_touch_up:
				if self.collide_point(args[1].x, args[1].y): uipup.on_reset_function()
			
	
		Button:
			id: no
			text: "NO"
			pos: uicc.x + uicc.width/2, uicc.y 
			size: uicc.width/2, (uipup.height)/(4)
			font_size: (uipup.height)/(7)
			on_touch_up:
				if self.collide_point(args[1].x, args[1].y): uipup.on_decline_function()
