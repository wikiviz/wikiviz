# model.py

import common.singleton as singleton
from random import random
import math
import AntAlg.ASO as ASO
from kivy.clock import Clock

class Model(object):
    __metaclass__ = singleton.Singleton

    def __init__(self, **kwargs):
        """
         Creates empty model of nodes and edges, prepares to dispatch when updated
        """
        super(Model, self).__init__(**kwargs)
        self.nodes = {}
        self.bucket_y = 0
        self.disk_y = 0
	self.ant_system= None



    def convert_martix_to_graph(self, creation_callback, edge_creation, params):
        self.ant_system = ASO.make_ant_system(5, .25, .25, .5, 10, 10, 5, 2)
	graph_matrix = self.ant_system.graph
        for counter,i in enumerate(graph_matrix.bucket_list):
	    if i == graph_matrix.bucket_list[-1]:
		continue
            par = Node(None, (0,self.bucket_y), "Bucket "+str(counter))
            self.nodes["Bucket "+str(counter)] = par
            par.set_id(par)
            creation_callback(par)
            self.bucket_y+=150*3
            for eachDest in i.keys():
		try:
		    child = self.nodes["Disk "+str(eachDest)]
		    edge_creation(par.get_parent_ui_reference(), child.get_ui_reference())
		except:
                    child = Node(par, (200,self.disk_y), "Disk "+str(eachDest))
		    self.nodes["Disk "+str(eachDest)] = child
		    child.set_id(child)
		    creation_callback(child)
                self.disk_y +=150
	Clock.schedule_interval(self.ant_iteration, 3.)
    def ant_iteration(self, *args):
	print ASO.do_ant_iteration(self.ant_system)


                
                


            



    def find_event_handler(self, touch):
        x , y = touch.x, touch.y
        print "in event handler"
        for eachChild in self.nodes.keys():
            node = self.nodes[eachChild].get_ui_reference()
            
            if node:
                print "in x"
                if node.collide_point(x, y):
                    print " in collision"
                    return self.nodes[eachChild]
        return False

    def has_been_explored_yet(self, keyword):
        for eachNode in self.nodes:
            if keyword==eachNode.get_keyword():
                if eachNode.has_visited == False:
                    return False
                return True
        return False
    def dump_nodes(self):
        self.nodes = []
        self.x = 0
        self.y = 0



class Node:

    def __init__(self, parent, pos, keyword, has_visited=False):
        self.pos = pos

        self.img_src = ''
        self.keyword = keyword
        self.summary= ''
 

        self.parent = parent #MODEL NODE

        self.ui_reference = None
        self.has_visited = has_visited     

    def get_parent(self):
        return self.parent
    def get_source(self):
        return self.img_src
    def get_keyword(self):
        return self.keyword
    def get_pos(self):
        return self.get_ui_reference().pos
    def get_summary(self):
        return self.summary
    def set_id(self, ref):
        # print "ref",ref
        if self.parent == None:
            self.parent = ref
        self.ui_reference = ref
    def get_ui_reference(self):
        return self.ui_reference
    def get_parent_ui_reference(self):
        return self.parent.get_ui_reference()




