#:kivy 1.8.0
#:import r random
#: import win kivy.core.window
#:import Color kivy.graphics.Color






<Node>:


pos: self.pos
size: self.size
image: image
label: label

Widget:

canvas:
Color:
rgb: r.random(), r.random(), r.random()
Ellipse:
size:self.height+30, self.width+30
pos:self.x-15 , self.y-15
AsyncImage:
id: image
canvas:
Ellipse:
size: self.height+20, self.width+20
pos: self.x-10, self.y-10
texture: self.texture

Label:
id: label
pos: image.x, image.y+image.height+5
text: ""
font_size: root.height/2

<Edge>:

pos: self.p.center_x, self.p.center_y
size: self.c.center_x - self.p.center_x, self.c.center_y - self.p.center_y

canvas:
Color:
rgb: r.random(), r.random(),r.random()

Line:
points: self.p.center_x, self.p.center_y , self.c.center_x, self.c.center_y
width: 5



#uis
#uipup
#uibc


<Scatter_Summary_Widget>:
id: ssw
uic: uic.__self__
summary: rst.__self__
uibc: uibc.__self__
border: 0


UIC:
id: uic

uis: uis.__self__
uibc: uibc.__self__
uipup: uipup.__self__

on_add_node:
model_node = args[1]
source=model_node.get_source()
keyword = model_node.get_keyword()
pos = model_node.get_pos()

to_be_added = Node(pos = pos)
model_node.set_id(to_be_added.id) # set model_node's data
parent = model_node.get_parent()

to_be_added.display(source)
to_be_added.label.text= keyword
#to_be_added.model_node = model_node alternate method
uic.add_widget(to_be_added)
uic.add_widget(Edge(parent, to_be_added)) # parent, child



StartupImage:
id: startup_image
size: win.Window.width, win.Window.height
center: win.Window.center
source: 'startup.jpg'

Widget:
id: uis
size: (5*uic.width)/6, uic.height/(7)
pos: uic.center_x-uis.width/2, uic.center_y

search_bar: search_text_field
go_button: search_button


MyTextInput:
id: search_text_field
pos: uis.pos
size: (uis.width-uis.height), uis.height
font_size: (uis.height)-20
text: 'Search a Word'
multiline: False
cursor_blink: False

on_touch_up:
x = (search_text_field.text == 'Search a Word')
if x and search_text_field.collide_point(args[1].x, args[1].y): search_text_field.text = ''

on_enter:
blocked_and_collided = not uic.disabled
if blocked_and_collided: uibc.disabled = False;\
uic.remove_widget(startup_image);\
uibc.opacity = 1;\
uic.display()

Image:
id: search_button
pos: uis.x+(uis.width-uis.height), uis.y
size: (uis.height), uis.height
source: 'mag.jpg'
on_touch_up:
blocked_and_collided = ((uic.blocked == False) and (search_button.collide_point(args[1].x, args[1].y)))
if blocked_and_collided: uibc.disabled = False;\
uibc.opacity = 1;\
uic.remove_widget(startup_image);\
uic.display()



Popup:
id: uipup
content: uicc
title: "Would you like to reset your search?"
title_size: str(14/uic.scale)+'px'
size: root.width/(2*uic.scale), root.height/(7*uic.scale)
separator_height: 0
center: (uic.width/2 - uic.x)/uic.scale, (uic.height/2 - uic.y)/uic.scale



Widget:
id: uicc
size: uipup.width, uipup.height/2
yes_button: yes
no_button: no
pos: uipup.pos
Button:
id: yes
text: "YES"
pos: uicc.pos
size: uicc.width/2-(15/uic.scale), (uipup.height)/(4)
font_size: (uipup.height)/(7)
on_touch_up:
collided = yes.collide_point(args[1].x, args[1].y)
if collided: uipup.disabled = True;\
uibc.disabled = True;\
uibc.opacity = 0;\
uic.scale = 1.0;\
uic.do_translation = False;\
uic.do_scale = False;\
uic.remove_widget(uis);\
uic.remove_widget(uipup);\
uic.is_popup_displayed = False;\
uic.clear_widgets();\
uic.pos = (0,0);\
uic.add_widget(uis);\
uis.disabled = False;\
search_text_field.font_size = uis.height - 20;\
search_text_field.font_name = 'DroidSans';\
search_text_field.text = 'Search a Word'


Button:
id: no
text: "NO"
pos: uicc.x + uicc.width/2, uicc.y
size: uicc.width/2-(15/uic.scale), (uipup.height)/(4)
font_size: (uipup.height)/(7)
on_touch_up:

if no.collide_point(args[1].x, args[1].y): uic.remove_widget(uipup);\
uic.do_translation = True;\
uic.is_popup_displayed = False



BoxLayout:
id: uibc
size: 100, 100
spacing: str(5) + 'px'
pos: (root.width - uibc.width) , (uic.height - uibc.height)
new_search: new_search_button
share: share_button
Image:
id: new_search_button
source: 'mag.jpg'
size: uibc.width-5, uibc.height

on_touch_down:

if uic.blocked == False and uibc.collide_point(args[1].x, args[1].y): uic.uipup.disabled = False;\
uic.add_widget(uipup);\
uic.do_translation = False;\
uic.is_popup_displayed = True

Image:
id: share_button
source: 'share.jpg'
size: uibc.width-5, uibc.height



UISummary:

id: rst
text: ''


Widget:
id: tsum
size_hint: None, None
height: 50*36+3*win.Window.size[1]/8
width: root.width
pos: rst.pos
Widget:
pos: tsum.pos
canvas:
Color:
rgba: .1,.1,.1,.95
Rectangle:
pos: tsum.x - root.width/2, tsum.y - root.height/2
size: 2*tsum.width ,2*tsum.height

AsyncImage:
id: sum_pic
size: win.Window.size[0]/2, win.Window.size[1]/4
center_x: tsum.x + tsum.width/2
y: tsum.y + tsum.height- 1.5* self.height
source: "http://minnesota.publicradio.org/collections/special/columns/comparing_notes/wolfgang_amadeus_mozart.gif"
Label:
id: summary
text: rst.text
markup: True
center: tsum.center_x ,tsum.y+ (tsum.height-1.5*sum_pic.height)/2



    Status
    API
    Training
    Shop
    Blog
    About

    Â© 2014 GitHub, Inc.
    Terms
    Privacy
    Security
    Contact

