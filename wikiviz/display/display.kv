#:kivy 1.8.0
#:import r random







<UIC>:
	uis: uis.__self__
	uibc: uibc.__self__

	uipup: uipup



	on_transform_with_touch:
		self.remove_widget(self.uibc)
		self.add_widget(self.uibc)


	Widget:
		id: uis
		size: (5*root.width)/12, root.height/(14)
		pos: root.center_x-self.width/2, root.center_y

		search_bar: search_text_field
		go_button: search_button

		UITextInput:
			id: search_text_field
			pos: uis.pos
			size: (uis.width-uis.height), uis.height
			font_size: (uis.height)-20
			text: 'Search a Word'
			multiline: False
			cursor_blink: False

		Image:
			id: search_button
			pos: uis.x+(uis.width-uis.height), uis.y
			size: (uis.height), uis.height

			source: 'mag.jpg'

			on_touch_down: x = root.display() if (abs(args[1].x - search_button.center_x) <=search_button.width/2 and abs(args[1].y - search_button.center_y) <= search_button.height/2) else 1

	BoxLayout:
		id: uibc
		size: (root.width/7)/root.scale, (root.width/14)/root.scale
		spacing: str(5/root.scale) + 'px'
		pos: (root.width - root.x)/root.scale - (uibc.width) , (root.height - root.y)/root.scale - (uibc.height)
		new_search: new_search_button
		share: share_button
		Image:
			id: new_search_button
			source: 'mag.jpg'
			size: uibc.width-5/root.scale, uibc.height

			on_touch_down: x = root.confirm_new_search() if (abs(args[1].x - new_search_button.center_x) <=new_search_button.width/2 and abs(args[1].y - new_search_button.center_y) <= new_search_button.height/2) else 1


		Image:
			id: share_button
			source: 'share.jpg'		
			size: uibc.width-5/root.scale, uibc.height
	Popup:
		id: uipup
		content: uicc
		title: "Would you like to reset your search?"
		title_size: str(14/root.scale)+'px'
		size: root.width/(2*root.scale), root.height/(7*root.scale)
		separator_height: 0
		auto_dismiss: False
		center: (root.width/2 - root.x)/root.scale, (root.height/2 - root.y)/root.scale
		Widget:
			id: uicc
			size: uipup.width, uipup.height/2
			yes_button: yes
			no_button: no 

			Button:
				id: yes
				text: "YES"
				pos: uicc.pos
				size: uicc.width/2-(15/root.scale), (uipup.height)/(4)
				font_size: (uipup.height)/(7)
				on_touch_down:  x = root.new_search() if (abs(args[1].x - yes.center_x) <=yes.width/2 and abs(args[1].y - yes.center_y) <= yes.height/2) else 1
	
			Button:
				id: no
				text: "NO"
				pos: uicc.x + uicc.width/2, uicc.y 
				size: uicc.width/2-(15/root.scale), (uipup.height)/(4)
				font_size: (uipup.height)/(7)
				on_touch_down:  x = root.remove_widget(uipup) if (abs(args[1].x - no.center_x) <=no.width/2 and abs(args[1].y - no.center_y) <= no.height/2) else 1


<Node>:
    asynci: asynci
	source: None
    canvas:
        Color:
            rgb: (r.random(),r.random(),r.random())

        Ellipse:
            size:self.height*3+20, self.width*3+20
            pos:self.pos[0]-1.5*self.width-10 , self.pos[1]-1.5*self.height-10

			
    AsyncImage:
        id: asynci
        size: self.size
		pos: root.pos
		source: root.source
		canvas:
		
			StencilPush


			Ellipse:
				pos: self.pos[0]-1.5*self.width , self.pos[1]-1.5*self.height
				size:  self.height*3, self.width*3


			StencilUse 


			Rectangle:
				texture: self.texture
				pos: self.pos[0]-2*self.width , self.pos[1]-2*self.height
				size: self.height*4, self.width*4

			StencilUnUse

   
			Ellipse:
				pos: self.pos[0]-1.5*self.width , self.pos[1]-1.5*self.height
				size:  self.height*3, self.width*3


			StencilPop